  async getTeam(id: number): Promise<Team | undefined> {
    try {
      const team = await appwriteService.findDocumentByAttribute(
        appwriteService.collections.teams,
        'id',
        id
      );
      
      return team ? team as unknown as Team : undefined;
    } catch (error) {
      console.error("Error getting team:", error);
      return undefined;
    }
  }
  
  async getUserTeam(userId: number): Promise<Team | undefined> {
    try {
      // Find team member record where userId matches
      const response = await appwriteService.listDocumentsWithQuery(
        appwriteService.collections.teamMembers,
        [Query.equal('userId', userId)]
      );
      
      if (response.documents.length === 0) return undefined;
      
      const teamMember = response.documents[0] as unknown as TeamMember;
      return this.getTeam(teamMember.teamId);
    } catch (error) {
      console.error("Error getting user team:", error);
      return undefined;
    }
  }
  
  async createTeam(team: InsertTeam): Promise<Team> {
    try {
      // Generate a unique ID for the team
      const id = Date.now();
      
      const teamData = {
        ...team,
        id,
        createdAt: new Date()
      };
      
      const createdTeam = await appwriteService.createDocument(
        appwriteService.collections.teams,
        teamData
      );
      
      return createdTeam as unknown as Team;
    } catch (error) {
      console.error("Error creating team:", error);
      throw error;
    }
  }
  
  async updateTeam(id: number, teamData: Partial<Team>): Promise<Team | undefined> {
    try {
      const team = await this.getTeam(id);
      if (!team || !team.$id) return undefined;
      
      const updatedTeam = await appwriteService.updateDocument(
        appwriteService.collections.teams,
        team.$id,
        teamData
      );
      
      return updatedTeam as unknown as Team;
    } catch (error) {
      console.error("Error updating team:", error);
      return undefined;
    }
  }
  
  async deleteTeam(id: number): Promise<boolean> {
    try {
      // First, get the team document ID
      const team = await this.getTeam(id);
      if (!team || !team.$id) return false;
      
      // Delete all team members and invites
      const members = await this.getTeamMembers(id);
      for (const member of members) {
        await this.removeTeamMember(id, member.userId);
      }
      
      const invites = await this.getTeamInvites(id);
      for (const invite of invites) {
        if (invite.$id) {
          await appwriteService.deleteDocument(
            appwriteService.collections.teamInvites,
            invite.$id
          );
        }
      }
      
      // Delete the team
      await appwriteService.deleteDocument(
        appwriteService.collections.teams,
        team.$id
      );
      
      return true;
    } catch (error) {
      console.error("Error deleting team:", error);
      return false;
    }
  }
  
  // Team Members operations
  async getTeamMembers(teamId: number): Promise<TeamMember[]> {
    try {
      const response = await appwriteService.listDocumentsWithQuery(
        appwriteService.collections.teamMembers,
        [Query.equal('teamId', teamId)]
      );
      
      return response.documents as unknown as TeamMember[];
    } catch (error) {
      console.error("Error getting team members:", error);
      return [];
    }
  }
  
  async getTeamMember(teamId: number, userId: number): Promise<TeamMember | undefined> {
    try {
      const response = await appwriteService.listDocumentsWithQuery(
        appwriteService.collections.teamMembers,
        [
          Query.equal('teamId', teamId),
          Query.equal('userId', userId)
        ]
      );
      
      if (response.documents.length === 0) return undefined;
      return response.documents[0] as unknown as TeamMember;
    } catch (error) {
      console.error("Error getting team member:", error);
      return undefined;
    }
  }
  
  async addTeamMember(member: InsertTeamMember): Promise<TeamMember> {
    try {
      // Generate a unique ID for the team member
      const id = Date.now();
      
      const memberData = {
        ...member,
        id,
        joinedAt: new Date()
      };
      
      const createdMember = await appwriteService.createDocument(
        appwriteService.collections.teamMembers,
        memberData
      );
      
      return createdMember as unknown as TeamMember;
    } catch (error) {
      console.error("Error adding team member:", error);
      throw error;
    }
  }
  
  async updateTeamMember(id: number, memberData: Partial<TeamMember>): Promise<TeamMember | undefined> {
    try {
      const member = await appwriteService.findDocumentByAttribute(
        appwriteService.collections.teamMembers,
        'id',
        id
      );
      
      if (!member || !member.$id) return undefined;
      
      const updatedMember = await appwriteService.updateDocument(
        appwriteService.collections.teamMembers,
        member.$id,
        memberData
      );
      
      return updatedMember as unknown as TeamMember;
    } catch (error) {
      console.error("Error updating team member:", error);
      return undefined;
    }
  }
  
  async removeTeamMember(teamId: number, userId: number): Promise<boolean> {
    try {
      const member = await this.getTeamMember(teamId, userId);
      if (!member || !member.$id) return false;
      
      await appwriteService.deleteDocument(
        appwriteService.collections.teamMembers,
        member.$id
      );
      
      return true;
    } catch (error) {
      console.error("Error removing team member:", error);
      return false;
    }
  }
  
  async findTeamCoLeader(teamId: number): Promise<TeamMember | undefined> {
    try {
      const response = await appwriteService.listDocumentsWithQuery(
        appwriteService.collections.teamMembers,
        [
          Query.equal('teamId', teamId),
          Query.equal('role', 'co-leader')
        ]
      );
      
      if (response.documents.length === 0) return undefined;
      return response.documents[0] as unknown as TeamMember;
    } catch (error) {
      console.error("Error finding team co-leader:", error);
      return undefined;
    }
  }
  
  async isTeamMember(teamId: number, userId: number): Promise<boolean> {
    const member = await this.getTeamMember(teamId, userId);
    return !!member;
  }
  
  // Team Invites operations
  async getTeamInvites(teamId: number): Promise<TeamInvite[]> {
    try {
      const response = await appwriteService.listDocumentsWithQuery(
        appwriteService.collections.teamInvites,
        [
          Query.equal('teamId', teamId),
          Query.equal('status', 'pending')
        ]
      );
      
      return response.documents as unknown as TeamInvite[];
    } catch (error) {
      console.error("Error getting team invites:", error);
      return [];
    }
  }
  
  async getUserInvites(userId: number): Promise<TeamInvite[]> {
    try {
      const response = await appwriteService.listDocumentsWithQuery(
        appwriteService.collections.teamInvites,
        [
          Query.equal('userId', userId),
          Query.equal('status', 'pending')
        ]
      );
      
      return response.documents as unknown as TeamInvite[];
    } catch (error) {
      console.error("Error getting user invites:", error);
      return [];
    }
  }
  
  async getTeamInvite(teamId: number, userId: number): Promise<TeamInvite | undefined> {
    try {
      const response = await appwriteService.listDocumentsWithQuery(
        appwriteService.collections.teamInvites,
        [
          Query.equal('teamId', teamId),
          Query.equal('userId', userId),
          Query.equal('status', 'pending')
        ]
      );
      
      if (response.documents.length === 0) return undefined;
      return response.documents[0] as unknown as TeamInvite;
    } catch (error) {
      console.error("Error getting team invite:", error);
      return undefined;
    }
  }
  
  async getTeamInviteById(id: number): Promise<TeamInvite | undefined> {
    try {
      const invite = await appwriteService.findDocumentByAttribute(
        appwriteService.collections.teamInvites,
        'id',
        id
      );
      
      return invite ? invite as unknown as TeamInvite : undefined;
    } catch (error) {
      console.error("Error getting team invite by id:", error);
      return undefined;
    }
  }
  
  async createTeamInvite(invite: InsertTeamInvite): Promise<TeamInvite> {
    try {
      // Generate a unique ID for the invite
      const id = Date.now();
      
      const inviteData = {
        ...invite,
        id,
        status: "pending",
        createdAt: new Date()
      };
      
      const createdInvite = await appwriteService.createDocument(
        appwriteService.collections.teamInvites,
        inviteData
      );
      
      return createdInvite as unknown as TeamInvite;
    } catch (error) {
      console.error("Error creating team invite:", error);
      throw error;
    }
  }
  
  async updateTeamInvite(id: number, inviteData: Partial<TeamInvite>): Promise<TeamInvite | undefined> {
    try {
      const invite = await this.getTeamInviteById(id);
      if (!invite || !invite.$id) return undefined;
      
      const updatedInvite = await appwriteService.updateDocument(
        appwriteService.collections.teamInvites,
        invite.$id,
        inviteData
      );
      
      return updatedInvite as unknown as TeamInvite;
    } catch (error) {
      console.error("Error updating team invite:", error);
      return undefined;
    }
  }